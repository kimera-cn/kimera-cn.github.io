<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>桃沢礼</title>
  
  <subtitle>生活明朗,万物可爱</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-11-21T09:10:07.370Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>桃沢礼</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue生命周期</title>
    <link href="http://example.com/2024/11/21/Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>http://example.com/2024/11/21/Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</id>
    <published>2024-11-21T08:52:30.000Z</published>
    <updated>2024-11-21T09:10:07.370Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、什么是Vue生命周期？"><a href="#一、什么是Vue生命周期？" class="headerlink" title="一、什么是Vue生命周期？"></a>一、什么是Vue生命周期？</h3><p>Vue生命周期指的是Vue实例从创建到销毁的一系列过程，在这个过程中，Vue实例会在不同的阶段执行特定的函数（钩子函数），让开发者可以在合适的时机进行数据初始化、DOM操作、资源获取与释放等操作。</p><hr><img src="https://s1.imagehub.cc/images/2024/11/21/7296bb94abc76119184cd3a561d7a5e9.png" alt="Vue生命周期"><hr><h3 id="二、Vue生命周期的主要阶段及钩子函数"><a href="#二、Vue生命周期的主要阶段及钩子函数" class="headerlink" title="二、Vue生命周期的主要阶段及钩子函数"></a>二、Vue生命周期的主要阶段及钩子函数</h3><ol><li><p><strong>创建阶段（Initialization）</strong></p><ul><li><strong>beforeCreate</strong>：<ul><li>此时Vue实例刚刚被创建，数据观测（data observer）和事件机制（event&#x2F;watcher setup）都还未初始化。</li><li>无法访问到数据（data）、方法（methods）等实例上的属性。</li><li>主要用于插件开发等一些特殊场景下的初始化操作，在实际业务开发中用得相对较少。</li></ul></li><li><strong>created</strong>：<ul><li>实例已经完成了数据观测、属性和方法的运算，初始化事件等。</li><li>可以访问到data中的数据、methods中的方法，但此时DOM还未挂载，所以不能进行DOM相关操作。</li><li>常用来进行一些数据的初始化，比如从后台获取数据并赋值给data中的变量等。</li></ul></li></ul></li><li><p><strong>挂载阶段（Mounting）</strong></p><ul><li><strong>beforeMount</strong>：<ul><li>在挂载开始之前被调用，此时模板（template）已经编译成渲染函数（render function），但还未挂载到DOM上。</li><li>可以获取到虚拟DOM（VNode）相关信息，但真实DOM元素还不可用。</li><li>可以在此进行一些最后的数据处理或调整，不过要注意不能依赖真实DOM的状态。</li></ul></li><li><strong>mounted</strong>：<ul><li>实例挂载完成，DOM已经更新，真实的DOM元素可以被访问到。</li><li>这是最常用的钩子函数之一，常用于进行DOM操作，比如获取某个DOM元素的高度、宽度，或者给DOM元素添加事件监听器等。</li><li>注意，此时可能并不是所有的子组件都已经挂载完成，如果需要确保所有子组件也挂载完成，可以在子组件中也监听mounted钩子函数并进行相应处理。</li></ul></li></ul></li><li><p><strong>更新阶段（Updating）</strong></p><ul><li><strong>beforeUpdate</strong>：<ul><li>当数据发生变化，Vue实例即将重新渲染DOM之前被调用。</li><li>此时可以获取到最新的数据（因为数据已经发生了变化），但DOM还未更新，仍然是旧的状态。</li><li>可以在此进行一些在DOM更新之前需要做的准备工作，比如记录一些DOM的初始状态等。</li></ul></li><li><strong>update</strong>：<ul><li>DOM已经根据新的数据重新渲染完成。</li><li>可以在这里对更新后的DOM进行操作，不过要注意避免在这个钩子函数中再次修改数据，以免触发无限循环更新。</li></ul></li></ul></li><li><p><strong>销毁阶段（Destruction）</strong></p><ul><li><strong>beforeDestroy</strong>：<ul><li>在Vue实例销毁之前被调用。</li><li>此时实例仍然完全可用，可以访问到所有的实例属性和方法，DOM也还未被销毁。</li><li>常用于进行一些清理工作，比如清除定时器、取消订阅事件等，以防止内存泄漏。</li></ul></li><li><strong>destroyed</strong>：<ul><li>Vue实例以及其关联的所有子组件实例都已经被销毁。</li><li>之后就不能再访问到实例的属性和方法了，DOM也已经被移除（如果有相关DOM操作的话）。</li></ul></li></ul></li></ol><h3 id="三、示例代码演示"><a href="#三、示例代码演示" class="headerlink" title="三、示例代码演示"></a>三、示例代码演示</h3><p>以下是一个简单的示例代码来展示Vue生命周期钩子函数的使用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue Lifecycle Example<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; message &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">message</span>: <span class="string">&#x27;Hello, Vue Lifecycle!&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeCreate: 实例刚刚创建，无法访问数据和方法&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;此时是否能访问message:&#x27;</span>, <span class="variable language_">this</span>.<span class="property">message</span>); <span class="comment">// 输出undefined</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;此时是否能访问methods中的方法:&#x27;</span>, <span class="keyword">typeof</span> <span class="variable language_">this</span>.<span class="property">someMethod</span>); <span class="comment">// 输出undefined</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;created: 可以访问数据和方法，但DOM未挂载&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;此时是否能访问message:&#x27;</span>, <span class="variable language_">this</span>.<span class="property">message</span>); <span class="comment">// 输出Hello, Vue Lifecycle!</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;此时是否能访问methods中的方法:&#x27;</span>, <span class="keyword">typeof</span> <span class="variable language_">this</span>.<span class="property">someMethod</span>); <span class="comment">// 输出function（假设定义了someMethod方法）</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">beforeMount</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeMount: 模板已编译，DOM未挂载，可获取虚拟DOM信息&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> vm = <span class="variable language_">this</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;虚拟DOM相关信息:&#x27;</span>, vm.<span class="property">$el</span>); <span class="comment">// 输出类似[object HTMLDivElement]但内容为空，因为未真正挂载</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;mounted: DOM已挂载，可进行DOM操作&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> vm = <span class="variable language_">this</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;获取DOM元素:&#x27;</span>, vm.<span class="property">$el</span>); <span class="comment">// 输出真正挂载后的DOM元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 可以在此进行DOM操作，比如给元素添加点击事件等</span></span></span><br><span class="line"><span class="language-javascript">        vm.<span class="property">$el</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;DOM元素被点击了&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">beforeUpdate</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeUpdate: 数据变化，DOM未更新&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> vm = <span class="variable language_">this</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;此时的message:&#x27;</span>, vm.<span class="property">message</span>); <span class="comment">// 输出更新后的message值</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;当前DOM状态:&#x27;</span>, vm.<span class="property">$el</span>.<span class="property">textContent</span>); <span class="comment">// 输出旧的message值，因为DOM未更新</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">updated</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;updated: DOM已根据新数据更新&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> vm = <span class="variable language_">this</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;更新后的DOM状态:&#x27;</span>, vm.<span class="property">$el</span>.<span class="property">textContent</span>); <span class="comment">// 输出更新后的message值</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">beforeDestroy</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeDestroy: 实例即将销毁，可进行清理工作&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 假设之前设置了定时器，在此清除定时器</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">timer</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="built_in">clearInterval</span>(<span class="variable language_">this</span>.<span class="property">timer</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">destroyed</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;destroyed: 实例已销毁&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 模拟数据更新</span></span></span><br><span class="line"><span class="language-javascript">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      app.<span class="property">message</span> = <span class="string">&#x27;Updated Message&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="number">3000</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 模拟销毁实例</span></span></span><br><span class="line"><span class="language-javascript">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      app.$destroy();</span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="number">6000</span>);</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在上述代码中：</p><ul><li>首先创建了一个Vue实例，在实例的各个生命周期钩子函数中通过 console.log 输出了当前阶段的相关信息以及对数据和DOM的访问情况。</li><li>然后通过 setTimeout 分别模拟了数据更新和实例销毁的操作，以便观察在这些情况下各个生命周期钩子函数的执行情况。</li></ul><h3 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h3><p>Vue生命周期提供了一种清晰的方式让开发者能够在Vue实例的不同发展阶段进行针对性的操作。了解并合理运用这些生命周期钩子函数，可以更好地管理数据、操作DOM、避免内存泄漏等问题，从而编写出更加健壮、高效的Vue应用程序。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、什么是Vue生命周期？&quot;&gt;&lt;a href=&quot;#一、什么是Vue生命周期？&quot; class=&quot;headerlink&quot; title=&quot;一、什么是Vue生命周期？&quot;&gt;&lt;/a&gt;一、什么是Vue生命周期？&lt;/h3&gt;&lt;p&gt;Vue生命周期指的是Vue实例从创建到销毁的一系列过</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="前端开发" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Vue" scheme="http://example.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>事件高级</title>
    <link href="http://example.com/2024/11/16/%E4%BA%8B%E4%BB%B6%E9%AB%98%E7%BA%A7/"/>
    <id>http://example.com/2024/11/16/%E4%BA%8B%E4%BB%B6%E9%AB%98%E7%BA%A7/</id>
    <published>2024-11-16T08:47:19.000Z</published>
    <updated>2024-11-17T08:16:47.237Z</updated>
    
    <content type="html"><![CDATA[<h1 id="事件高级知识总结"><a href="#事件高级知识总结" class="headerlink" title="事件高级知识总结"></a>事件高级知识总结</h1><h2 id="一、注册事件（绑定事件）"><a href="#一、注册事件（绑定事件）" class="headerlink" title="一、注册事件（绑定事件）"></a>一、注册事件（绑定事件）</h2><h3 id="1-1-注册事件概述"><a href="#1-1-注册事件概述" class="headerlink" title="1.1 注册事件概述"></a>1.1 注册事件概述</h3><ul><li>给元素添加事件，称为注册事件或者绑定事件。</li><li>注册事件有两种方式：<ul><li>传统注册方式：  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onclick=<span class="string">&quot;alert(&#x27;你好&#x27;)&quot;</span>&gt;&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;你好&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>方法监听注册方式：<br>  W3C标准推荐方式，使用 <strong>addEventListener()</strong> 方法（IE9之前的IE不支持此方法，可使用 <strong>attachEvent()</strong> 代替）。特点是同一个元素同一个事件可以注册多个监听器，按注册顺序依次执行。</li></ul></li></ul><h3 id="1-2-addEventListener事件监听方式"><a href="#1-2-addEventListener事件监听方式" class="headerlink" title="1.2 addEventListener事件监听方式"></a>1.2 addEventListener事件监听方式</h3><ul><li><strong>eventTarget.addEventListener(type, listener[, useCapture])</strong><ol><li>type：事件类型字符串，比如 <strong>click</strong> 、<strong>mouseover</strong>，注意这里不要带<strong>on</strong>。</li><li>listener：事件处理函数，事件发生时，会调用该监听函数。</li><li>useCapture：可选参数，是一个布尔值，默认是<strong>false</strong>。<br>  <strong>true</strong>:在捕获阶段触发，在冒泡阶段不触发。(事件从父元素到子元素，依次触发)<br>  <strong>false</strong>:在冒泡阶段触发，在捕获阶段不触发。(事件从子元素到父元素，依次触发)</li></ol></li></ul><h3 id="1-3-attachEvent事件监听方式"><a href="#1-3-attachEvent事件监听方式" class="headerlink" title="1.3 attachEvent事件监听方式"></a>1.3 attachEvent事件监听方式</h3><ul><li><strong>eventTarget.attachEvent(eventNameWithOn, callback)</strong><ol><li>eventNameWithOn：事件类型字符串，比如<strong>onclick</strong>、<strong>onmouseover</strong>，这里要带<strong>on</strong>。</li><li>callback：事件处理函数，当目标触发事件时回调函数被调用。注意仅IE8及早期版本支持。</li></ol></li></ul><h3 id="1-4-注册事件兼容性解决方案"><a href="#1-4-注册事件兼容性解决方案" class="headerlink" title="1.4 注册事件兼容性解决方案"></a>1.4 注册事件兼容性解决方案</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">addEventListener</span>(<span class="params">element, eventName, fn</span>) &#123;</span><br><span class="line">    <span class="comment">// 判断当前浏览器是否支持addEventListener方法</span></span><br><span class="line">    <span class="keyword">if</span> (element.<span class="property">addEventListener</span>) &#123;</span><br><span class="line">        element.<span class="title function_">addEventListener</span>(eventName, fn); <span class="comment">// 第三个参数默认是false</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.<span class="property">attachEvent</span>) &#123;</span><br><span class="line">        element.<span class="title function_">attachEvent</span>(<span class="string">&#x27;on&#x27;</span> + eventName, fn);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        element[<span class="string">&#x27;on&#x27;</span> + eventName] = fn;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、删除事件（解绑事件）"><a href="#二、删除事件（解绑事件）" class="headerlink" title="二、删除事件（解绑事件）"></a>二、删除事件（解绑事件）</h2><h3 id="2-1-删除事件的方式"><a href="#2-1-删除事件的方式" class="headerlink" title="2.1 删除事件的方式"></a>2.1 删除事件的方式</h3><ul><li>传统注册方式：<strong>eventTarget.onclick &#x3D; null;</strong></li><li>方法监听注册方式：<ol><li><strong>eventTarget.removeEventListener(type, listener[, useCapture]);</strong></li><li><strong>eventTarget.detachEvent(eventNameWithOn, callback);</strong></li></ol></li></ul><h3 id="2-2-删除事件兼容性解决方案"><a href="#2-2-删除事件兼容性解决方案" class="headerlink" title="2.2 删除事件兼容性解决方案"></a>2.2 删除事件兼容性解决方案</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">removeEventListener</span>(<span class="params">element, eventName, fn</span>) &#123;</span><br><span class="line">    <span class="comment">// 判断当前浏览器是否支持removeEventListener方法</span></span><br><span class="line">    <span class="keyword">if</span> (element.<span class="property">removeEventListener</span>) &#123;</span><br><span class="line">        element.<span class="title function_">removeEventListener</span>(eventName, fn); <span class="comment">// 第三个参数默认是false</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.<span class="property">detachEvent</span>) &#123;</span><br><span class="line">        element.<span class="title function_">detachEvent</span>(<span class="string">&#x27;on&#x27;</span> + eventName, fn);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        element[<span class="string">&#x27;on&#x27;</span> + eventName] = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、DOM事件流"><a href="#三、DOM事件流" class="headerlink" title="三、DOM事件流"></a>三、DOM事件流</h2><ul><li>事件流描述的是从页面中接收事件的顺序，DOM事件流分为3个阶段：捕获阶段、当前目标阶段、冒泡阶段。</li><li>事件冒泡：IE最早提出，事件开始时由最具体的元素接收，然后逐级向上传播到DOM最顶层节点的过程。</li><li>事件捕获：网景最早提出，由DOM最顶层节点开始，然后逐级向下传播到最具体的元素接收的过程。</li><li>注意事项：<ol><li>JS代码中只能执行捕获或者冒泡其中的一个阶段。</li><li><strong>onclick</strong>和<strong>attachEvent</strong>只能得到冒泡阶段。</li><li><strong>addEventListener(type, listener[, useCapture])<strong>第三个参数如果是</strong>true</strong>，表示在事件捕获阶段调用事件处理程序；如果是<strong>false</strong>（不写默认就是<strong>false</strong>），表示在事件冒泡阶段调用事件处理程序。</li><li>实际开发中很少使用事件捕获，更关注事件冒泡。</li><li>有些事件是没有冒泡的，比如<strong>onblur</strong>、<strong>onfocus</strong>、<strong>onmouseenter</strong>、<strong>onmouseleave</strong> 。</li></ol></li></ul><h2 id="四、事件对象"><a href="#四、事件对象" class="headerlink" title="四、事件对象"></a>四、事件对象</h2><h3 id="4-1-什么是事件对象"><a href="#4-1-什么是事件对象" class="headerlink" title="4.1 什么是事件对象"></a>4.1 什么是事件对象</h3><ul><li>当给元素注册事件时，事件发生后，跟事件相关的一系列信息数据的集合都放到一个对象里面，这个对象就是事件对象<strong>event</strong>，在事件处理函数中可以通过形参获取（如<strong>function(event) {}<strong>），也可以写成</strong>e</strong>或者<strong>evt</strong>。它代表事件的状态，比如键盘按键的状态、鼠标的位置、鼠标按钮的状态等。</li></ul><h3 id="4-2-事件对象的使用语法"><a href="#4-2-事件对象的使用语法" class="headerlink" title="4.2 事件对象的使用语法"></a>4.2 事件对象的使用语法</h3><ul><li>在注册事件时，事件对象会被系统自动创建，并依次传递给事件监听器（事件处理函数），不需要传递实参。例如：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">eventTarget.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="comment">// 这里的event就是事件对象</span></span><br><span class="line">&#125;;</span><br><span class="line">eventTarget.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="comment">// 这里的event就是事件对象</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-3-事件对象的兼容性方案"><a href="#4-3-事件对象的兼容性方案" class="headerlink" title="4.3 事件对象的兼容性方案"></a>4.3 事件对象的兼容性方案</h3><ul><li>标准浏览器中是浏览器给方法传递的参数，只需要定义形参<strong>e</strong>就可以获取到。在IE6 - 8中，浏览器不会给方法传递参数，如果需要的话，需要到<strong>window.event</strong>中获取查找。解决办法：**e &#x3D; e || window.event;**。</li></ul><h3 id="4-4-事件对象的常见属性和方法"><a href="#4-4-事件对象的常见属性和方法" class="headerlink" title="4.4 事件对象的常见属性和方法"></a>4.4 事件对象的常见属性和方法</h3><table><thead><tr><th>属性&#x2F;方法</th><th>说明</th><th>兼容性</th></tr></thead><tbody><tr><td><strong>e.target</strong></td><td>返回触发事件的对象</td><td>标准</td></tr><tr><td><strong>e.srcElement</strong></td><td>返回触发事件的对象</td><td>非标准，IE6 - 8使用</td></tr><tr><td><strong>e.type</strong></td><td>返回事件的类型，比如<strong>click</strong>、<strong>mouseover</strong>，不带<strong>on</strong></td><td>标准</td></tr><tr><td><strong>e.cancelBubble</strong></td><td>该属性阻止冒泡</td><td>非标准，IE6 - 8使用</td></tr><tr><td><strong>e.returnValue</strong></td><td>该属性阻止默认事件（默认行为），比如不让链接跳转</td><td>非标准，IE6 - 8使用</td></tr><tr><td><strong>e.preventDefault()</strong></td><td>该方法阻止默认事件（默认行为），比如不让链接跳转</td><td>标准</td></tr><tr><td><strong>e.stopPropagation()</strong></td><td>阻止冒泡</td><td>标准</td></tr></tbody></table><h2 id="五、阻止事件冒泡"><a href="#五、阻止事件冒泡" class="headerlink" title="五、阻止事件冒泡"></a>五、阻止事件冒泡</h2><h3 id="5-1-阻止事件冒泡的两种方式"><a href="#5-1-阻止事件冒泡的两种方式" class="headerlink" title="5.1 阻止事件冒泡的两种方式"></a>5.1 阻止事件冒泡的两种方式</h3><ul><li>标准写法：利用事件对象里面的<strong>stopPropagation()</strong> 方法，<strong>e.stopPropagation();</strong> 推荐</li><li>非标准写法：IE 6 - 8利用事件对象<strong>cancelBubble</strong> 属性，<strong>e.cancelBubble &#x3D; true;</strong></li></ul><h3 id="5-2-阻止事件冒泡的兼容性解决方案"><a href="#5-2-阻止事件冒泡的兼容性解决方案" class="headerlink" title="5.2 阻止事件冒泡的兼容性解决方案"></a>5.2 阻止事件冒泡的兼容性解决方案</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (e &amp;&amp; e.<span class="property">stopPropagation</span>) &#123;</span><br><span class="line">    e.<span class="title function_">stopPropagation</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">event</span>.<span class="property">cancelBubble</span> = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、事件委托（代理、委派）"><a href="#六、事件委托（代理、委派）" class="headerlink" title="六、事件委托（代理、委派）"></a>六、事件委托（代理、委派）</h2><ul><li>原理：不是每个子节点单独设置事件监听器，而是事件监听器设置在其父节点上，然后利用冒泡原理影响设置每个子节点。</li><li>作用：只操作了一次DOM，提高了程序的性能。<br>例如给<code>&lt;ul&gt;</code>注册点击事件，然后利用事件对象的<code>target</code>来找到当前点击的<code>&lt;li&gt;</code>，因为点击<code>&lt;li&gt;</code>，事件会冒泡到<code>&lt;ul&gt;</code>上，<code>&lt;ul&gt;</code>有注册事件，就会触发事件监听器。</li></ul><h2 id="七、常用的鼠标事件"><a href="#七、常用的鼠标事件" class="headerlink" title="七、常用的鼠标事件"></a>七、常用的鼠标事件</h2><h3 id="7-1-常用的鼠标事件"><a href="#7-1-常用的鼠标事件" class="headerlink" title="7.1 常用的鼠标事件"></a>7.1 常用的鼠标事件</h3><table><thead><tr><th>鼠标事件</th><th>触发条件</th></tr></thead><tbody><tr><td><strong>onclick</strong></td><td>鼠标点击左键触发</td></tr><tr><td><strong>onmouseover</strong></td><td>鼠标经过触发</td></tr><tr><td><strong>onmouseout</strong></td><td>鼠标离开触发</td></tr><tr><td><strong>onfocus</strong></td><td>获得鼠标焦点触发</td></tr><tr><td><strong>onblur</strong></td><td>失去鼠标焦点触发</td></tr><tr><td><strong>onmousemove</strong></td><td>鼠标移动触发</td></tr><tr><td><strong>onmouseup</strong></td><td>鼠标弹起触发</td></tr><tr><td><strong>onmousedown</strong></td><td>鼠标按下触发</td></tr></tbody></table><h3 id="7-2-鼠标事件对象"><a href="#7-2-鼠标事件对象" class="headerlink" title="7.2 鼠标事件对象"></a>7.2 鼠标事件对象</h3><table><thead><tr><th>鼠标事件对象</th><th>说明</th></tr></thead><tbody><tr><td><strong>e.clientX</strong></td><td>返回鼠标相对于浏览器窗口可视区的X坐标</td></tr><tr><td><strong>e.clientY</strong></td><td>返回鼠标相对于浏览器窗口可视区的Y坐标</td></tr><tr><td><strong>e.pageX</strong></td><td>返回鼠标相对于文档页面的X坐标（IE9+支持）</td></tr><tr><td><strong>e.pageY</strong></td><td>返回鼠标相对于文档页面的Y坐标（IE9+支持）</td></tr><tr><td><strong>e.screenX</strong></td><td>返回鼠标相对于电脑屏幕的X坐标</td></tr><tr><td><strong>e.screenY</strong></td><td>返回鼠标相对于电脑屏幕的Y坐标</td></tr></tbody></table><h3 id="7-3-禁止鼠标右键菜单"><a href="#7-3-禁止鼠标右键菜单" class="headerlink" title="7.3 禁止鼠标右键菜单"></a>7.3 禁止鼠标右键菜单</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// contextmenu 禁止右键菜单</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">oncontextmenu</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-4-禁止选中文字"><a href="#7-4-禁止选中文字" class="headerlink" title="7.4 禁止选中文字"></a>7.4 禁止选中文字</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// selectstart 禁止选中文字</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">onselectstart</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="八、常用的键盘事件"><a href="#八、常用的键盘事件" class="headerlink" title="八、常用的键盘事件"></a>八、常用的键盘事件</h2><h3 id="8-1-常用键盘事件"><a href="#8-1-常用键盘事件" class="headerlink" title="8.1 常用键盘事件"></a>8.1 常用键盘事件</h3><table><thead><tr><th>键盘事件</th><th>触发条件</th></tr></thead><tbody><tr><td><strong>onkeyup</strong></td><td>某个键盘按键被松开时触发</td></tr><tr><td><strong>onkeydown</strong></td><td>某个键盘按键被按下时触发</td></tr><tr><td><strong>onkeypress</strong></td><td>某个键盘按键被按下时并弹起时触发</td></tr></tbody></table><h3 id="8-2-ASCII表"><a href="#8-2-ASCII表" class="headerlink" title="8.2 ASCII表"></a>8.2 ASCII表</h3><ul><li>ASCII表（American Standard Code for Information Interchange美国标准信息交换代码），表中的ASCII字符可以用“Alt+小键盘上的数字键”方法输入。</li></ul><h3 id="8-3-键盘事件对象"><a href="#8-3-键盘事件对象" class="headerlink" title="8.3 键盘事件对象"></a>8.3 键盘事件对象</h3><ul><li>键盘事件对象的<strong>keyCode</strong>属性返回按键的ASCII值。注意<strong>onkeydown</strong>和<strong>onkeyup</strong>不区分字母大小写，<strong>onkeypress</strong>区分字母大小写。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;事件高级知识总结&quot;&gt;&lt;a href=&quot;#事件高级知识总结&quot; class=&quot;headerlink&quot; title=&quot;事件高级知识总结&quot;&gt;&lt;/a&gt;事件高级知识总结&lt;/h1&gt;&lt;h2 id=&quot;一、注册事件（绑定事件）&quot;&gt;&lt;a href=&quot;#一、注册事件（绑定事件）&quot; cla</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="前端开发" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript-DOM</title>
    <link href="http://example.com/2024/10/12/JavaScript-DOM/"/>
    <id>http://example.com/2024/10/12/JavaScript-DOM/</id>
    <published>2024-10-12T07:16:25.000Z</published>
    <updated>2024-10-16T09:02:11.099Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#dom-%E7%AE%80%E4%BB%8B">DOM 简介</a></li><li><a href="#%E8%8E%B7%E5%8F%96%E5%85%83%E7%B4%A0">获取元素</a></li><li><a href="#%E4%BA%8B%E4%BB%B6%E5%9F%BA%E7%A1%80">事件基础</a></li><li><a href="#%E6%93%8D%E4%BD%9C%E5%85%83%E7%B4%A0">操作元素</a></li><li><a href="#%E8%8A%82%E7%82%B9%E6%93%8D%E4%BD%9C">节点操作</a></li><li><a href="#dom-%E9%87%8D%E7%82%B9%E6%A0%B8%E5%BF%83">DOM 重点核心</a></li></ul><h2 id="DOM-简介"><a href="#DOM-简介" class="headerlink" title="DOM 简介"></a>DOM 简介</h2><p>文档对象模型（Document Object Model，简称 DOM），是 W3C 组织推荐的处理可扩展标记语言（HTML 或者XML）的标准编程接口。它是一个将网页转换为可编程文档结构的模型。通过DOM，开发者可以使用JavaScript等语言访问和操作网页的元素，从而动态地改变网页内容、结构和样式。简而言之，DOM是网页内容的编程接口。</p><h3 id="1-1-什么是-DOM"><a href="#1-1-什么是-DOM" class="headerlink" title="1.1 什么是 DOM"></a>1.1 什么是 DOM</h3><ul><li>文档：一个页面就是一个文档，DOM 中使用 <code>document</code> 表示</li><li>元素：页面中的所有标签都是元素，DOM 中使用 <code>element</code> 表示</li><li>节点：网页中的所有内容都是节点（标签、属性、文本、注释等），DOM 中使用 <code>node</code> 表示</li></ul><h2 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h2><h3 id="2-1-如何获取页面元素"><a href="#2-1-如何获取页面元素" class="headerlink" title="2.1 如何获取页面元素"></a>2.1 如何获取页面元素</h3><p>获取页面中的元素可以使用以下几种方式：</p><ul><li>根据 ID 获取</li><li>根据标签名获取</li><li>通过 HTML5 新增的方法获取</li></ul><h3 id="2-2-根据-ID-获取"><a href="#2-2-根据-ID-获取" class="headerlink" title="2.2 根据 ID 获取"></a>2.2 根据 ID 获取</h3><p>使用 <code>getElementById()</code> 方法可以获取带有 ID 的元素对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;id&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="2-3-根据标签名获取"><a href="#2-3-根据标签名获取" class="headerlink" title="2.3 根据标签名获取"></a>2.3 根据标签名获取</h3><p>使用 <code>getElementsByTagName()</code> 方法可以返回带有指定标签名的对象的集合。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;标签名&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="2-4-通过-HTML5-新增的方法获取"><a href="#2-4-通过-HTML5-新增的方法获取" class="headerlink" title="2.4 通过 HTML5 新增的方法获取"></a>2.4 通过 HTML5 新增的方法获取</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;选择器&#x27;</span>); <span class="comment">// 根据指定选择器返回第一个元素对象</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;类名&#x27;</span>); <span class="comment">// 根据类名返回元素对象集合</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;选择器&#x27;</span>); <span class="comment">// 根据指定选择器返回</span></span><br></pre></td></tr></table></figure><h3 id="2-5-获取body，html元素"><a href="#2-5-获取body，html元素" class="headerlink" title="2.5 获取body，html元素"></a>2.5 获取body，html元素</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">body</span> <span class="comment">// 返回body元素对象</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">documentElement</span> <span class="comment">// 返回html元素对象</span></span><br></pre></td></tr></table></figure><h2 id="事件基础"><a href="#事件基础" class="headerlink" title="事件基础"></a>事件基础</h2><h3 id="3-1-事件概述"><a href="#3-1-事件概述" class="headerlink" title="3.1 事件概述"></a>3.1 事件概述</h3><p>JavaScript事件是用户与网页交互时触发的行为，如点击、键盘输入等，通过事件监听器来处理这些事件，并可以访问事件对象获取详细信息，支持事件传播、默认行为阻止和自定义事件等功能。</p><h3 id="3-2-常用的鼠标事件"><a href="#3-2-常用的鼠标事件" class="headerlink" title="3.2 常用的鼠标事件"></a>3.2 常用的鼠标事件</h3><table><thead><tr><th>鼠标事件</th><th>触发条件</th></tr></thead><tbody><tr><td>onclick</td><td>鼠标点击左键触发</td></tr><tr><td>onmouseover</td><td>鼠标经过触发</td></tr><tr><td>onmouseout</td><td>鼠标离开触发</td></tr><tr><td>onfocus</td><td>获得鼠标焦点触发</td></tr><tr><td>onblur</td><td>失去鼠标焦点触发</td></tr><tr><td>onmousemove</td><td>鼠标移动触发</td></tr><tr><td>onmouseup</td><td>鼠标弹起触发</td></tr><tr><td>onmousedown</td><td>鼠标按下触发</td></tr></tbody></table><h2 id="操作元素"><a href="#操作元素" class="headerlink" title="操作元素"></a>操作元素</h2><h3 id="4-1-改变元素内容"><a href="#4-1-改变元素内容" class="headerlink" title="4.1 改变元素内容"></a>4.1 改变元素内容</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">element.<span class="property">innerText</span> </span><br><span class="line"><span class="comment">// 替换元素内的所有内容（包括HTML标签），只留下纯文本</span></span><br><span class="line">element.<span class="property">innerHTML</span> </span><br><span class="line"><span class="comment">// 替换元素内部的所有内容（包括原有的HTML标签和文本），并解析赋值的字符串作为新的HTML</span></span><br></pre></td></tr></table></figure><h3 id="4-2-常用元素的属性操作"><a href="#4-2-常用元素的属性操作" class="headerlink" title="4.2 常用元素的属性操作"></a>4.2 常用元素的属性操作</h3><ol><li><strong>innerText</strong>、<strong>innerHTML</strong></li><li><strong>src</strong>、<strong>href</strong></li><li><strong>id</strong>、<strong>alt</strong>、<strong>title</strong></li></ol><h3 id="4-3-表单元素的属性操作"><a href="#4-3-表单元素的属性操作" class="headerlink" title="4.3 表单元素的属性操作"></a>4.3 表单元素的属性操作</h3><p>利用 DOM 可以操作如下表单元素的属性：</p><ul><li><strong>type</strong></li><li><strong>value</strong></li><li><strong>checked</strong></li><li><strong>selected</strong></li><li><strong>disabled</strong></li></ul><h3 id="4-4-样式属性操作"><a href="#4-4-样式属性操作" class="headerlink" title="4.4 样式属性操作"></a>4.4 样式属性操作</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">element.<span class="property">style</span> <span class="comment">// 行内样式操作</span></span><br><span class="line">element.<span class="property">className</span> <span class="comment">// 类名样式操作</span></span><br></pre></td></tr></table></figure><!-- ### 4.5 排他思想如果有同一组元素，我们想要某一个元素实现某种样式，需要用到循环的排他思想算法：1. 所有元素全部清除样式（干掉其他人）2. 给当前元素设置样式 （留下我自己）3. 注意顺序不能颠倒，首先干掉其他人，再设置自己 --><h3 id="4-5-自定义属性的操作"><a href="#4-5-自定义属性的操作" class="headerlink" title="4.5 自定义属性的操作"></a>4.5 自定义属性的操作</h3><ol><li><p>获取属性值</p><ul><li><code>element.属性</code> 获取属性值。</li><li><code>element.getAttribute(&#39;属性&#39;)</code>;</li></ul></li><li><p>设置属性值</p><ul><li><code>element.属性 = ‘值’</code> 设置内置属性值。</li><li><code>element.setAttribute(&#39;属性&#39;, &#39;值&#39;)</code>;</li></ul></li><li><p>移除属性</p><ul><li><code>element.removeAttribute(&#39;属性&#39;)</code>;</li></ul></li></ol><h3 id="4-7-H5自定义属性"><a href="#4-7-H5自定义属性" class="headerlink" title="4.7 H5自定义属性"></a>4.7 H5自定义属性</h3><ol><li><p>设置H5自定义属性</p><ul><li>H5规定自定义属性<code>data-</code>开头做为属性名并且赋值。</li><li>比如 <code>&lt;div data-index=&quot;1&quot;&gt;&lt;/div&gt;</code></li><li>或者使用 JS 设置 <code>element.setAttribute(&#39;data-index&#39;, 2)</code></li></ul></li><li><p>获取H5自定义属性</p><ul><li>兼容性获取 <code>element.getAttribute(&#39;data-index&#39;)</code></li><li>H5新增 <code> element.dataset.index</code> 或者 <code>element.dataset[&#39;index&#39;]</code> (ie 11才开始支持)</li></ul></li></ol><h2 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h2><h3 id="5-1-节点概述"><a href="#5-1-节点概述" class="headerlink" title="5.1 节点概述"></a>5.1 节点概述</h3><p>网页中的所有内容都是节点（标签、属性、文本、注释等），在DOM 中，节点使用 <code>node</code> 来表示。<br>在Web开发中，节点（Node）是文档对象模型（DOM）中的一个基本单位，代表HTML或XML文档中的一个元素、文本、注释或文档本身。节点可以包含子节点，形成树状结构，允许程序对文档内容进行操作和遍历。</p><h3 id="5-3-节点层级"><a href="#5-3-节点层级" class="headerlink" title="5.3 节点层级"></a>5.3 节点层级</h3><ol><li><p>父级节点</p><ul><li><strong>node.parentNode</strong></li></ul></li><li><p>子节点</p><ul><li><strong>parentNode.childNodes</strong>（标准）</li><li><strong>parentNode.children</strong>（非标准）<font color="red">重点掌握</font></li><li><strong>parentNode.firstChild</strong></li><li><strong>parentNode.lastChild</strong></li><li><strong>parentNode.firstElementChild</strong></li><li><strong>parentNode.lastElementChild</strong></li></ul></li></ol><p>获取第一个子元素节点或最后一个子元素节点</p><ul><li>获取第一个子元素节点 <code>parentNode.chilren[0]</code> </li><li>获取最后一个子元素节点 <code>parentNode.chilren[parentNode.chilren.length - 1]</code></li></ul><ol start="3"><li>兄弟节点<ul><li><strong>node.nextSibling</strong> 返回当前元素的下一个兄弟元素节点</li><li><strong>node.previousSibling</strong> 返回当前元素的上一个兄弟元素节点</li><li><strong>node.nextElementSibling</strong> 返回当前元素的下一个兄弟元素节点</li><li><strong>node.previousElementSibling</strong> 返回当前元素的上一个兄弟元素节点</li></ul></li></ol><h3 id="5-4-创建节点"><a href="#5-4-创建节点" class="headerlink" title="5.4 创建节点"></a>5.4 创建节点</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;tagName&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="5-5-添加节点"><a href="#5-5-添加节点" class="headerlink" title="5.5 添加节点"></a>5.5 添加节点</h3><ol><li><p><code>node.appendChild(child)</code><br>将一个节点添加到指定父节点的子节点列表末尾</p></li><li><p><code>node.insertBefore(child, 指定元素)</code><br>将一个节点添加到父节点的指定子节点前面</p></li></ol><h3 id="5-6-删除节点"><a href="#5-6-删除节点" class="headerlink" title="5.6 删除节点"></a>5.6 删除节点</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node.<span class="title function_">removeChild</span>(child)</span><br></pre></td></tr></table></figure><p>node.removeChild() 方法从 DOM 中删除一个子节点，返回删除的节点。</p><h3 id="5-7-复制节点"><a href="#5-7-复制节点" class="headerlink" title="5.7 复制节点"></a>5.7 复制节点</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node.<span class="title function_">cloneNode</span>()</span><br></pre></td></tr></table></figure><p>node.cloneNode() 方法返回调用该方法的节点的一个副本。<br>false 为浅拷贝，true 为深拷贝。</p><h3 id="5-8-替换节点"><a href="#5-8-替换节点" class="headerlink" title="5.8 替换节点"></a>5.8 替换节点</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parentNode.<span class="title function_">replaceChild</span>(newChild, oldChild);</span><br></pre></td></tr></table></figure><h3 id="5-9-创建元素总结"><a href="#5-9-创建元素总结" class="headerlink" title="5.9 创建元素总结"></a>5.9 创建元素总结</h3><ol><li><strong>document.write()</strong></li><li><strong>innerHTML</strong></li><li><strong>document.createElement()</strong></li></ol><p>区别：</p><ol><li><code>document.write()</code>：用于在文档加载时直接向页面输出文本或HTML内容，通常在页面加载完成后使用会导致页面内容被替换。</li><li><code>innerHTML</code>：用于获取或设置元素的HTML内容，可以动态修改指定元素内部的HTML结构和文本。</li><li><code>document.createElement()</code>：用于创建新的HTML元素节点，但不会自动将其添加到文档中，需要通过其他方法（如<code>appendChild</code>）将其插入到DOM中。</li><li>如果页面创建元素很多，建议使用 <code>innerHTML</code> 因其效率更高（不要拼接字符串，采取数组形式拼接）</li><li>如果页面创建元素较少，建议使用 <code>createElement()</code></li><li>不同浏览器下，<code>innerHTML</code> 效率要比 <code>createElement</code> 高</li></ol><h2 id="DOM-重点核心"><a href="#DOM-重点核心" class="headerlink" title="DOM 重点核心"></a>DOM 重点核心</h2><h3 id="6-1-创建"><a href="#6-1-创建" class="headerlink" title="6.1 创建"></a>6.1 创建</h3><ul><li><strong>document.write</strong>：直接将内容写入页面的内容流，但文档流执行完毕，则会导致页面全部重绘。</li><li><strong>element.innerHTML</strong>：将内容写入某个 DOM 节点，不会导致页面全部重绘。</li><li><strong>document.createElement()</strong> ：创建多个元素效率稍低，但结构更清晰。</li></ul><h3 id="6-2-增"><a href="#6-2-增" class="headerlink" title="6.2 增"></a>6.2 增</h3><ul><li><strong>appendChild</strong>：将一个节点添加到指定父节点的子节点列表末尾。</li><li><strong>insertBefore</strong>：将一个节点添加到父节点的指定子节点前面。</li></ul><h3 id="6-3-删"><a href="#6-3-删" class="headerlink" title="6.3 删"></a>6.3 删</h3><ul><li><strong>removeChild</strong>：从 DOM 中删除一个子节点。</li></ul><h3 id="6-4-改"><a href="#6-4-改" class="headerlink" title="6.4 改"></a>6.4 改</h3><ul><li>修改元素属性：<code>src</code>、<code>href</code>、<code>title</code> 等。</li><li>修改普通元素内容：<code>innerHTML</code>、<code>innerText</code>。</li><li>修改表单元素：<code>value</code>、<code>type</code>、<code>disabled</code> 等。</li><li>修改元素样式：<code>style</code>、<code>className</code>。</li></ul><h3 id="6-5-查"><a href="#6-5-查" class="headerlink" title="6.5 查"></a>6.5 查</h3><ul><li>DOM 提供的 API 方法：<code>getElementById</code>、<code>getElementsByTagName</code>。</li><li>H5 提供的新方法：<code>querySelector</code>、<code>querySelectorAll</code>。</li><li>利用节点操作获取元素：<code>parentNode</code>、<code>children</code>、<code>previousElementSibling</code>、<code>nextElementSibling</code>。</li></ul><h3 id="6-6-属性操作"><a href="#6-6-属性操作" class="headerlink" title="6.6 属性操作"></a>6.6 属性操作</h3><ul><li><strong>setAttribute</strong>：设置 DOM 的属性值。</li><li><strong>getAttribute</strong>：得到 DOM 的属性值。</li><li><strong>removeAttribute</strong>：移除属性。</li></ul><h3 id="6-7-事件操作"><a href="#6-7-事件操作" class="headerlink" title="6.7 事件操作"></a>6.7 事件操作</h3><ul><li>给元素注册事件，采取事件源.事件类型 &#x3D; 事件处理程序。<table><thead><tr><th>鼠标事件</th><th>触发条件</th></tr></thead><tbody><tr><td>onclick</td><td>鼠标点击左键触发</td></tr><tr><td>onmouseover</td><td>鼠标经过触发</td></tr><tr><td>onmouseout</td><td>鼠标离开触发</td></tr><tr><td>onfocus</td><td>获得鼠标焦点触发</td></tr><tr><td>onblur</td><td>失去鼠标焦点触发</td></tr><tr><td>onmousemove</td><td>鼠标移动触发</td></tr><tr><td>onmouseup</td><td>鼠标弹起触发</td></tr><tr><td>onmousedown</td><td>鼠标按下触发</td></tr></tbody></table></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;DOM&quot;&gt;&lt;a href=&quot;#DOM&quot; class=&quot;headerlink&quot; title=&quot;DOM&quot;&gt;&lt;/a&gt;DOM&lt;/h1&gt;&lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;u</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="前端开发" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>我的第一篇文章</title>
    <link href="http://example.com/2024/10/11/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
    <id>http://example.com/2024/10/11/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</id>
    <published>2024-10-11T05:21:09.000Z</published>
    <updated>2024-11-17T08:31:22.153Z</updated>
    
    <content type="html"><![CDATA[<h3 id="这是我的第一篇文章1"><a href="#这是我的第一篇文章1" class="headerlink" title="这是我的第一篇文章1"></a>这是我的第一篇文章1</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;这是我的第一篇文章1&quot;&gt;&lt;a href=&quot;#这是我的第一篇文章1&quot; class=&quot;headerlink&quot; title=&quot;这是我的第一篇文章1&quot;&gt;&lt;/a&gt;这是我的第一篇文章1&lt;/h3&gt;</summary>
      
    
    
    
    
    <category term="test" scheme="http://example.com/tags/test/"/>
    
  </entry>
  
</feed>
